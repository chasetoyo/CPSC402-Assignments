PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

terminator Def "" ;

ADecl.   Arg    ::= Type ArgListId ;

separator Arg "," ;

SExp.        Stm ::= Exp ";" ;
SDecls.      Stm ::= Exp15 [Id] ";" ;
SInit.       Stm ::= Exp15 [Id] "=" Exp ";" ;
SReturn.     Stm ::= "return" Exp ";" ;
SReturnVoid. Stm ::= "return" ";" ;
SWhile.      Stm ::= "while" "(" Exp ")" Stm ;
SBlock.      Stm ::= "{" [Stm] "}" ;
SIfElse.     Stm ::= "if" "(" Exp ")" Stm "else" Stm ;

terminator Stm "" ;

ETrue.   Exp15  ::= "true"  ;
EFalse.  Exp15  ::= "false" ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double  ;
EString. Exp15  ::= String  ;
EId.     Exp15  ::= Id      ;
EType.   Exp15  ::= Type    ;

ETypeList.    Exp15  ::= Id "<" [Type] ">" ;

EApp.    Exp15  ::= Id "(" [Exp] ")" ;
EQConst. Exp15  ::= Exp15 "::" Exp15;
EPIncr.  Exp14  ::= Exp15 "++" ;
EPDecr.  Exp14  ::= Exp15 "--" ;

EIncr.   Exp13  ::= "++" Exp14 ;
EDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELShift. Exp10  ::= Exp10 "<<" Exp11 ;
ERShift. Exp10  ::= Exp15 ">>" Exp10 ;
ELt.     Exp9   ::= Exp9  "<"  Exp10 ;
EGt.     Exp9   ::= Exp9  ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp9  "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp9  ">=" Exp10 ;
EEq.     Exp8   ::= Exp8  "==" Exp9 ;
ENEq.    Exp8   ::= Exp8  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
EAss.    Exp2   ::= Exp3  "="  Exp2 ;


internal ETyped. Exp15 ::= "(" Exp ":" Type ")" ;

coercions Exp 15 ;

separator Exp ","  ;
separator Type "," ;
separator nonempty Id "," ;

rules Type   ::= "bool" | "int" | "double" | "void" | "string";

token Id (letter (letter | digit | '_')*) ;
                      
L2a. ArgListId ::= Id ;                      
L2b. ArgListId ::= Id "," ArgListId ;    

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
